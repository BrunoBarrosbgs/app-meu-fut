'use client';

import { useState, useEffect } from 'react';
import type { Match } from '@/lib/types';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Clock } from 'lucide-react';

interface CountdownClockProps {
  nextMatch: Match | null;
}

interface TimeLeft {
  days: number;
  hours: number;
  minutes: number;
  seconds: number;
}

const calculateTimeLeft = (targetDate: Date): TimeLeft | null => {
  const difference = +targetDate - +new Date();
  if (difference <= 0) {
    return null;
  }

  return {
    days: Math.floor(difference / (1000 * 60 * 60 * 24)),
    hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
    minutes: Math.floor((difference / 1000 / 60) % 60),
    seconds: Math.floor((difference / 1000) % 60),
  };
};

const TimeDisplay = ({ value, label }: { value: number; label: string }) => (
  <div className="flex flex-col items-center">
    <div className="w-16 h-16 sm:w-20 sm:h-20 flex items-center justify-center bg-black/70 rounded-lg text-4xl sm:text-5xl font-mono text-glow">
      {String(value).padStart(2, '0')}
    </div>
    <span className="text-xs sm:text-sm text-muted-foreground mt-2">{label}</span>
  </div>
);

export function CountdownClock({ nextMatch }: CountdownClockProps) {
  const [timeLeft, setTimeLeft] = useState<TimeLeft | null>(null);
  const [status, setStatus] = useState<'countdown' | 'in-progress' | 'finished' | 'no-match'>('no-match');

  useEffect(() => {
    if (!nextMatch || !nextMatch.date || !nextMatch.time) {
      setStatus('no-match');
      return;
    }

    const matchStart = new Date(`${nextMatch.date}T${nextMatch.time}:00`);
    const matchDuration = nextMatch.duration || 90; // Default to 90 mins if not specified
    const matchEnd = new Date(matchStart.getTime() + matchDuration * 60000);

    const updateStatus = () => {
        const now = new Date();
        if (now < matchStart) {
            setStatus('countdown');
            setTimeLeft(calculateTimeLeft(matchStart));
        } else if (now >= matchStart && now < matchEnd) {
            setStatus('in-progress');
            setTimeLeft(calculateTimeLeft(matchEnd));
        } else {
            setStatus('finished');
            setTimeLeft(null);
            if (timer) clearInterval(timer);
        }
    }

    let timer: NodeJS.Timeout | null = null;
    timer = setInterval(updateStatus, 1000);
    
    // Initial calculation to avoid 1-second delay
    updateStatus();

    return () => {
        if (timer) clearInterval(timer);
    };
  }, [nextMatch]);

  const getTitle = () => {
    switch (status) {
      case 'countdown':
        return `Tempo para a Próxima Partida: vs ${nextMatch?.opponent}`;
      case 'in-progress':
        return `Partida em Andamento: vs ${nextMatch?.opponent}`;
      case 'finished':
        return `Partida Recente Finalizada: vs ${nextMatch?.opponent}`;
      default:
        return 'Nenhuma partida agendada';
    }
  };
  
  const getSubtitle = () => {
     switch (status) {
      case 'countdown':
        return `O jogo começa em...`;
      case 'in-progress':
        return `Tempo restante para o apito final...`;
      case 'finished':
        return `Aguardando o resultado.`;
      default:
        return 'Fique de olho no calendário para novos eventos.';
    }
  }

  return (
    <Card className="mb-8 bg-card/50 border-primary/20">
      <CardHeader>
        <CardTitle className="flex items-center gap-2 text-xl font-headline">
          <Clock className="text-primary" />
          {getTitle()}
        </CardTitle>
        <p className="text-muted-foreground">{getSubtitle()}</p>
      </CardHeader>
      <CardContent>
        {status === 'countdown' || status === 'in-progress' ? (
          <div className="flex justify-center gap-2 sm:gap-4">
            {timeLeft?.days && timeLeft.days > 0 && <TimeDisplay value={timeLeft.days} label="DIAS" />}
            <TimeDisplay value={timeLeft?.hours ?? 0} label="HRS" />
            <TimeDisplay value={timeLeft?.minutes ?? 0} label="MIN" />
            <TimeDisplay value={timeLeft?.seconds ?? 0} label="SEG" />
          </div>
        ) : (
          <div className="text-center text-muted-foreground py-8">
            {status === 'finished' ? 'A partida terminou!' : 'Nenhum cronômetro ativo.'}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
