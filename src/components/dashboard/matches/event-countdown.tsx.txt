
'use client';

import { useState, useEffect } from 'react';
import type { Match } from '@/lib/types';
import { cn } from '@/lib/utils';
import { Timer, Hourglass } from 'lucide-react';

interface EventCountdownProps {
  match: Match;
  className?: string;
}

interface TimeLeft {
  days: number;
  hours: number;
  minutes: number;
  seconds: number;
}

const calculateTimeLeft = (targetDate: Date): TimeLeft | null => {
  const difference = +targetDate - +new Date();
  if (difference <= 0) {
    return null;
  }

  return {
    days: Math.floor(difference / (1000 * 60 * 60 * 24)),
    hours: Math.floor((difference / (1000 * 60 * 60)) % 24),
    minutes: Math.floor((difference / 1000 / 60) % 60),
    seconds: Math.floor((difference / 1000) % 60),
  };
};

export function EventCountdown({ match, className }: EventCountdownProps) {
  const [timeLeft, setTimeLeft] = useState<TimeLeft | null>(null);
  const [status, setStatus] = useState<'countdown' | 'in-progress' | 'finished'>('countdown');

  useEffect(() => {
    if (!match.date || !match.time) return;
    
    let timer: NodeJS.Timeout | null = null;
    
    const matchStart = new Date(`${match.date}T${match.time}:00`);
    const matchDuration = match.duration || 90; // Default 90 mins
    const matchEnd = new Date(matchStart.getTime() + matchDuration * 60000);

    const updateStatus = () => {
      const now = new Date();
      if (now < matchStart) {
        setStatus('countdown');
        setTimeLeft(calculateTimeLeft(matchStart));
      } else if (now >= matchStart && now < matchEnd) {
        setStatus('in-progress');
        setTimeLeft(calculateTimeLeft(matchEnd));
      } else {
        setStatus('finished');
        setTimeLeft(null);
        if (timer) clearInterval(timer);
      }
    };
    
    updateStatus(); // Initial call
    timer = setInterval(updateStatus, 1000);
    
    return () => {
      if (timer) clearInterval(timer);
    };
  }, [match]);
  
  if (status === 'finished') {
    return (
        <div className={cn("p-2 rounded-md bg-muted/30 text-center", className)}>
            <p className="text-sm font-semibold text-muted-foreground">Partida Finalizada</p>
        </div>
    )
  }

  return (
    <div className={cn("p-2 rounded-md bg-black/30 border border-primary/20", className)}>
        <div className="flex items-center justify-center gap-2 text-xs text-muted-foreground">
            {status === 'countdown' ? <Timer size={14} /> : <Hourglass size={14} />}
            <span>{status === 'countdown' ? 'Come√ßa em...' : 'Tempo Restante'}</span>
        </div>
        <div className="text-center font-headline text-2xl text-glow tracking-widest">
            {timeLeft ? (
              <p>
                {timeLeft.days > 0 && (
                    <>
                        <span className="text-glow-accent">{String(timeLeft.days).padStart(2, '0')}</span>
                        <span className="text-glow-accent text-lg">d</span>
                        <span className="text-primary/50 mx-0.5">:</span>
                    </>
                )}
                <span>{String(timeLeft.hours).padStart(2, '0')}</span>
                <span className="text-lg">h</span>
                <span className="text-primary/50 mx-0.5">:</span>
                <span>{String(timeLeft.minutes).padStart(2, '0')}</span>
                <span className="text-lg">m</span>
                <span className="text-primary/50 mx-0.5">:</span>
                <span>{String(timeLeft.seconds).padStart(2, '0')}</span>
                <span className="text-lg">s</span>
              </p>
            ) : (
                '00h:00m:00s'
            )}
        </div>
    </div>
  );
}
