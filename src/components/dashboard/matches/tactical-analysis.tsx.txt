
'use client';

import { useState, useEffect } from "react";
import type { Match, Player } from "@/lib/types";
import { Button } from "@/components/ui/button";
import { BrainCircuit, Loader2 } from "lucide-react";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { getTacticalAnalysis } from "@/lib/mock-responses";
import { useAuth } from "@/hooks/use-auth";

interface TacticalAnalysisProps {
  match: Match;
  players: Player[];
}

export function TacticalAnalysis({ match, players }: TacticalAnalysisProps) {
  const { auth } = useAuth();
  const [loading, setLoading] = useState(false);
  const [analysis, setAnalysis] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [teamName, setTeamName] = useState('Meu Fut');

  useEffect(() => {
    const storedTeamName = localStorage.getItem(`${auth.teamId}_teamName`);
    if (storedTeamName) setTeamName(storedTeamName);
  }, [auth.teamId]);

  const handleGenerateAnalysis = () => {
    setLoading(true);
    setError(null);
    setAnalysis(null);

    // Simulate a network request
    setTimeout(() => {
      try {
        const result = getTacticalAnalysis(match);
        setAnalysis(result);
      } catch (e) {
        console.error(e);
        setError("Falha ao buscar análise. Tente novamente mais tarde.");
      } finally {
        setLoading(false);
      }
    }, 500); // 0.5 second delay to simulate loading
  };

  return (
    <Dialog onOpenChange={(open) => { if (!open) { setAnalysis(null); setError(null); } }}>
      <DialogTrigger asChild>
        <Button variant="secondary" className="gap-2">
          <BrainCircuit size={16} />
          Análise Tática
        </Button>
      </DialogTrigger>
      <DialogContent className="max-w-2xl">
        <DialogHeader>
          <DialogTitle>Análise Tática: {teamName} vs {match.opponent}</DialogTitle>
          <DialogDescription>
            Análise gerada pelo sistema para te ajudar a preparar a melhor estratégia.
          </DialogDescription>
        </DialogHeader>
        <div className="mt-4 max-h-[60vh] overflow-y-auto pr-4">
          {loading && (
            <div className="flex items-center justify-center gap-2 p-8">
              <Loader2 className="h-6 w-6 animate-spin text-primary" />
              <span className="text-muted-foreground">Analisando dados...</span>
            </div>
          )}
          {error && <p className="text-destructive">{error}</p>}
          {analysis ? (
            <div className="prose prose-invert prose-p:text-foreground/90 prose-headings:text-primary prose-strong:text-primary/90 rounded-md bg-muted/30 p-4">
              <p>{analysis}</p>
            </div>
          ) : (
             <div className="flex flex-col items-center justify-center text-center p-8 bg-muted/20 rounded-lg">
                <BrainCircuit className="h-12 w-12 text-primary/50 mb-4" />
                <h3 className="font-headline text-xl mb-2">Pronto para a Estratégia?</h3>
                <p className="text-muted-foreground mb-4">Clique no botão abaixo para gerar uma análise tática detalhada para esta partida.</p>
                <Button onClick={handleGenerateAnalysis} disabled={loading} className="gap-2">
                    {loading ? (
                        <Loader2 className="h-4 w-4 animate-spin" />
                    ) : (
                        <BrainCircuit size={16} />
                    )}
                    Gerar Análise
                </Button>
            </div>
          )}
        </div>
      </DialogContent>
    </Dialog>
  );
}
