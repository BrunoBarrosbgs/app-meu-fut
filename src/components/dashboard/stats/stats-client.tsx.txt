
'use client';

import type { Player } from "@/lib/types";
import { Header } from "@/components/dashboard/header";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";
import { PieChart, Pie, Cell } from 'recharts';
import { StatCard } from "../stat-card";
import { Target, ShieldOff, Swords, Crown } from "lucide-react";
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import { cn } from "@/lib/utils";

interface StatsData {
  wins: number;
  losses: number;
  draws: number;
  goalsFor: number;
  goalsAgainst: number;
  totalMatches: number;
}

interface StatsClientProps {
  stats: StatsData;
  topGoalscorers: Player[];
}

const chartData = (stats: StatsData) => [
  { name: 'Vitórias', value: stats.wins, fill: 'hsl(var(--primary))' },
  { name: 'Derrotas', value: stats.losses, fill: 'hsl(var(--destructive))' },
  { name: 'Empates', value: stats.draws, fill: 'hsl(var(--muted-foreground))' },
];

const chartConfig = {
  value: {
    label: 'Partidas',
  },
  Vitórias: {
    label: 'Vitórias',
    color: 'hsl(var(--primary))',
  },
  Derrotas: {
    label: 'Derrotas',
    color: 'hsl(var(--destructive))',
  },
  Empates: {
    label: 'Empates',
    color: 'hsl(var(--muted-foreground))',
  },
};

const PodiumCard = ({ player, rank }: { player: Player, rank: 1 | 2 | 3 }) => {
  const rankStyles = {
    1: 'h-64 bg-gradient-to-t from-yellow-500/30 to-card/60 border-yellow-400',
    2: 'h-56 bg-gradient-to-t from-slate-400/30 to-card/60 border-slate-300',
    3: 'h-48 bg-gradient-to-t from-amber-700/30 to-card/60 border-amber-600',
  };
  const rankText = {
    1: '1º',
    2: '2º',
    3: '3º',
  };

  return (
    <Card className={cn(
      'w-full flex flex-col items-center justify-end p-4 text-center relative overflow-visible transition-all duration-300 hover:-translate-y-2',
      rankStyles[rank]
    )}>
      {rank === 1 && <Crown className="absolute -top-4 text-yellow-400 w-8 h-8 drop-shadow-lg" />}
      <Avatar className="h-20 w-20 border-4 border-background mb-3">
        <AvatarImage src={player.avatarUrl} alt={player.name} data-ai-hint="player photo" />
        <AvatarFallback>{player.name.charAt(0)}</AvatarFallback>
      </Avatar>
      <h3 className="font-bold text-lg truncate w-full">{player.name}</h3>
      <p className="font-headline text-3xl text-glow">{player.goals}</p>
      <p className="text-sm text-muted-foreground -mt-1">gols</p>
      <div className="absolute top-2 right-2 font-headline text-2xl text-white/50">{rankText[rank]}</div>
    </Card>
  );
};

export function StatsClient({ stats, topGoalscorers }: StatsClientProps) {
  const data = chartData(stats);

  return (
    <div>
      <Header title="Estatísticas do Time" pageContext="stats" />

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Main Stats Column */}
        <div className="lg:col-span-2 space-y-8">
            <Card>
                <CardHeader>
                    <CardTitle>Desempenho Geral</CardTitle>
                    <CardDescription>Resultado das últimas {stats.totalMatches} partidas.</CardDescription>
                </CardHeader>
                <CardContent className="grid grid-cols-1 md:grid-cols-2 gap-8 items-center">
                    <ChartContainer config={chartConfig as any} className="mx-auto aspect-square h-64">
                        <PieChart>
                            <ChartTooltip content={<ChartTooltipContent hideLabel />} />
                            <Pie data={data} dataKey="value" nameKey="name" innerRadius={60} strokeWidth={5}>
                                {data.map((entry, index) => (
                                    <Cell key={`cell-${index}`} fill={entry.fill} />
                                ))}
                            </Pie>
                        </PieChart>
                    </ChartContainer>
                    <div className="space-y-4">
                        <StatCard title="Total de Partidas" value={stats.totalMatches} icon={Swords} />
                        <StatCard title="Gols Marcados" value={stats.goalsFor} icon={Target} />
                        <StatCard title="Gols Sofridos" value={stats.goalsAgainst} icon={ShieldOff} />
                    </div>
                </CardContent>
            </Card>
        </div>

        {/* Hall of Fame Column */}
        <div className="lg:col-span-1">
             <Card>
                <CardHeader>
                    <CardTitle>Hall da Fama</CardTitle>
                    <CardDescription>Os maiores artilheiros do time.</CardDescription>
                </CardHeader>
                <CardContent>
                    {topGoalscorers.length >= 3 ? (
                        <div className="flex items-end justify-center gap-2 h-72">
                            <div className="w-1/3">
                                {topGoalscorers[1] && <PodiumCard player={topGoalscorers[1]} rank={2} />}
                            </div>
                            <div className="w-1/3">
                                {topGoalscorers[0] && <PodiumCard player={topGoalscorers[0]} rank={1} />}
                            </div>
                            <div className="w-1/3">
                                {topGoalscorers[2] && <PodiumCard player={topGoalscorers[2]} rank={3} />}
                            </div>
                        </div>
                    ) : (
                        <p className="text-muted-foreground text-center">Dados insuficientes para formar o pódio.</p>
                    )}
                </CardContent>
            </Card>
        </div>
      </div>
    </div>
  );
}
