
import { cn } from "@/lib/utils";

interface MovementArrowProps {
  start: { x: number; y: number };
  end: { x: number; y: number };
  type: 'attack' | 'defense';
}

export function MovementArrow({ start, end, type }: MovementArrowProps) {
  const isAttack = type === 'attack';

  // Calculate control point for the curve
  const midX = (start.x + end.x) / 2;
  const midY = (start.y + end.y) / 2;
  
  // Perpendicular vector for curve direction
  const dx = end.x - start.x;
  const dy = end.y - start.y;
  
  const ctrlX = midX - dy * 0.2; 
  const ctrlY = midY + dx * 0.2;

  const pathData = `M ${start.x},${start.y} Q ${ctrlX},${ctrlY} ${end.x},${end.y}`;

  return (
    <svg
      className="absolute inset-0 w-full h-full z-10 pointer-events-none animate-in fade-in-50 duration-500"
      style={{'--attack-color': 'hsl(var(--primary))', '--defense-color': 'hsl(var(--destructive))'} as React.CSSProperties}
      viewBox="0 0 100 100"
      preserveAspectRatio="none"
    >
      <defs>
        <marker
          id={`arrowhead-attack`}
          viewBox="0 0 10 10"
          refX="8"
          refY="5"
          markerWidth="2.5"
          markerHeight="2.5"
          orient="auto-start-reverse"
        >
          <path d="M 0 0 L 10 5 L 0 10 z" fill="var(--attack-color)" />
        </marker>
         <marker
          id={`arrowhead-defense`}
          viewBox="0 0 10 10"
          refX="8"
          refY="5"
          markerWidth="2.5"
          markerHeight="2.5"
          orient="auto-start-reverse"
        >
          <path d="M 0 0 L 10 5 L 0 10 z" fill="var(--defense-color)" />
        </marker>
      </defs>
      <path
        d={pathData}
        stroke={isAttack ? 'var(--attack-color)' : 'var(--defense-color)'}
        strokeWidth="1.2"
        fill="none"
        markerEnd={`url(#arrowhead-${type})`}
        strokeDasharray={isAttack ? 'none' : '3 3'}
        className="opacity-90 drop-shadow-[0_1px_1px_rgba(0,0,0,0.7)]"
      />
    </svg>
  );
}
