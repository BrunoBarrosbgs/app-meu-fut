
'use client';

import { Card, CardContent } from '@/components/ui/card';
import { X, Eraser, Pen, GripVertical, Trash2 } from 'lucide-react';
import { useState, useRef, useEffect } from 'react';
import { cn } from '@/lib/utils';

type ActiveTool = 'draw' | 'erase';

export function TacticalControlPopup({
    onSetMode,
    onSetColor,
    onClear,
    onClose,
}: {
    onSetMode: (mode: ActiveTool) => void;
    onSetColor: (color: string) => void;
    onClear: () => void;
    onClose: () => void;
}) {
    const colors = ['#00ff87', '#ff4d4d', '#facc15', '#3b82f6', '#ffffff'];
    const [position, setPosition] = useState({ x: 20, y: 150 });
    const [isDragging, setIsDragging] = useState(false);
    const dragOffsetRef = useRef({ x: 0, y: 0 });
    const popupRef = useRef<HTMLDivElement>(null);
    const [activeTool, setActiveTool] = useState<ActiveTool>('draw');
    const [activeColor, setActiveColor] = useState('#00ff87');

    const handleMouseDown = (e: React.MouseEvent) => {
        if (!popupRef.current) return;
        setIsDragging(true);
        const rect = popupRef.current.getBoundingClientRect();
        dragOffsetRef.current = {
            x: e.clientX - rect.left,
            y: e.clientY - rect.top,
        };
        e.preventDefault();
        e.stopPropagation();
    };

    useEffect(() => {
        const handleMouseMove = (e: MouseEvent) => {
            if (!isDragging || !popupRef.current) return;
            
            const parent = popupRef.current.parentElement;
            if (!parent) return;

            const parentRect = parent.getBoundingClientRect();
            let newX = e.clientX - parentRect.left - dragOffsetRef.current.x;
            let newY = e.clientY - parentRect.top - dragOffsetRef.current.y;
            
            newX = Math.max(0, Math.min(newX, parentRect.width - popupRef.current.offsetWidth));
            newY = Math.max(0, Math.min(newY, parentRect.height - popupRef.current.offsetHeight));

            setPosition({ x: newX, y: newY });
        };

        const handleMouseUp = () => setIsDragging(false);

        if (isDragging) {
            window.addEventListener('mousemove', handleMouseMove);
            window.addEventListener('mouseup', handleMouseUp);
        }

        return () => {
            window.removeEventListener('mousemove', handleMouseMove);
            window.removeEventListener('mouseup', handleMouseUp);
        };
    }, [isDragging]);

    const handleToolClick = (tool: ActiveTool) => {
        setActiveTool(tool);
        onSetMode(tool);
    };

    const handleColorClick = (color: string) => {
        setActiveColor(color);
        setActiveTool('draw');
        onSetMode('draw');
        onSetColor(color);
    };
    
    const handleClearClick = (e: React.MouseEvent) => {
        e.stopPropagation();
        onClear();
    }
    
    const handleCloseClick = (e: React.MouseEvent) => {
        e.stopPropagation();
        onClose();
    }


    return (
        <Card 
            ref={popupRef}
            className="absolute z-40 bg-black/80 backdrop-blur-md border-primary/30 w-auto animate-in fade-in duration-300"
            style={{ left: `${position.x}px`, top: `${position.y}px` }}
            onClick={e => e.stopPropagation()}
        >
            <CardContent className="p-1 flex flex-wrap items-center gap-1">
                <div onMouseDown={handleMouseDown} className="p-1 text-muted-foreground cursor-grab active:cursor-grabbing touch-none">
                    <GripVertical size={20} />
                </div>

                <div
                    onClick={() => handleToolClick('draw')}
                    className={cn(
                        "p-2 rounded-md cursor-pointer hover:bg-accent",
                        activeTool === 'draw' ? 'bg-accent text-primary' : 'text-foreground'
                    )}
                >
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="lucide lucide-pencil"><path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"/><path d="m15 5 4 4"/></svg>
                </div>
                
                <div className="flex gap-1 items-center">
                    {colors.map(c => (
                        <div
                            key={c}
                            onClick={() => handleColorClick(c)}
                            className={cn(
                                "w-5 h-5 rounded-full border-2 cursor-pointer transition-all",
                                activeTool === 'draw' && activeColor === c ? 'border-white scale-110' : 'border-transparent'
                            )}
                            style={{ backgroundColor: c }}
                        />
                    ))}
                </div>

                <div
                    onClick={() => handleToolClick('erase')}
                    className={cn(
                        "p-2 rounded-md cursor-pointer hover:bg-accent",
                        activeTool === 'erase' ? 'bg-accent text-primary' : 'text-foreground'
                    )}
                >
                    <Eraser size={16} />
                </div>

                <div
                    onClick={handleClearClick}
                    className="p-2 rounded-md cursor-pointer hover:bg-destructive/80 text-destructive hover:text-destructive-foreground"
                >
                    <Trash2 size={16} />
                </div>
                
                <div
                    onClick={handleCloseClick}
                    className="p-2 rounded-md cursor-pointer hover:bg-accent text-foreground"
                >
                    <X size={16} />
                </div>
            </CardContent>
        </Card>
    );
}
